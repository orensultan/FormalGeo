You are a mathematician, expert in solving geometry problems. You are given two problems: Problem A and Problem B. Problem A is provided as an analogous problem to Problem B to inspire your approach.
Your primary task is to solve Problem B by constructing the correct sequence of theorems (THEOREM_SEQUENCE), which forms the proof solution for Problem B. While the theorem sequence (THEOREM_SEQUENCE) used to solve Problem A will be provided for reference, your focus should be on developing a new THEOREM_SEQUENCE specifically tailored to the conditions and requirements of Problem B.
It is essential that the THEOREM_SEQUENCE you generate for Problem B consists of theorems selected from the GDL (Geometry Theorem Dictionary) provided. This dictionary includes various theorems, each with a premise and a conclusion. You must ensure that every theorem you select aligns with the premises and contributes towards achieving the goal of Problem B. Although you can draw inspiration from the steps of the theorem sequence used for Problem A, the THEOREM_SEQUENCE for Problem B should rely on relevant theorems from the GDL to solve Problem B correctly.
For each problem, you are provided with the following information:
DESCRIPTION: A textual description of the problem.
CONSTRUCTION_CDL: The construction of the problem in Condition Declaration Language (CDL).
TEXT_CDL: The text of the problem in Condition Declaration Language (CDL).
GOAL_CDL: The goal of the problem in Condition Declaration Language (CDL).
CONSTRUCTION_CDL_EXTENDED: an extension of CONSTRUCTION_CDL.
SYMBOLS_AND_VALUES: symbol with the corresponding value in the following format (predicate;symbol;value)
EQUATIONS: equations to solve the problem in the following format (equation)
GOAL_SYMBOL: the symbol we are looking to find its value in the following format (symbol)
ANSWER: the calculated final answer for the problem in the following format (answer)
THEOREM_SEQUENCE: the sequence of theorems in the proof for that problem in the following format (step_id;theorem)
Additionally, you have access to a GDL (list of dictionaries). Each dictionary includes the name of a theorem, a premise, and a conclusion.
The same theorem can appear in different variations. The first argument for each theorem is an id, starting from 1 for variation one.
[{'theorem': 'line_addition(1,AB,BC)', 'premise': 'Collinear(ABC)', 'conclusion': ['Equal(LengthOfLine(AC),Add(LengthOfLine(AB),LengthOfLine(BC)))']}, {'theorem': 'midpoint_of_line_judgment(1,M,AB)', 'premise': 'Collinear(AMB)&Equal(LengthOfLine(AM),LengthOfLine(MB))', 'conclusion': ['IsMidpointOfLine(M,AB)']}, {'theorem': 'parallel_judgment_corresponding_angle(1,AB,CD,E)', 'premise': 'Angle(EAB)&Angle(ACD)&Collinear(EAC)&Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_corresponding_angle(2,AB,CD,E)', 'premise': 'Angle(BAC)&Angle(DCE)&Collinear(ACE)&Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_alternate_interior_angle(1,AB,CD)', 'premise': 'Angle(BAD)&Angle(CDA)&Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_alternate_interior_angle(2,AB,CD)', 'premise': 'Angle(CBA)&Angle(BCD)&Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_ipsilateral_internal_angle(1,AB,CD)', 'premise': 'Angle(BAC)&Angle(ACD)&Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_par_par(1,AB,CD,EF)', 'premise': 'ParallelBetweenLine(AB,CD)&ParallelBetweenLine(CD,EF)', 'conclusion': ['ParallelBetweenLine(AB,EF)']}, {'theorem': 'parallel_judgment_per_per(1,AB,CD)', 'premise': 'PerpendicularBetweenLine(BA,CA)&PerpendicularBetweenLine(AC,DC)', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_judgment_per_per(2,AB,CD)', 'premise': 'PerpendicularBetweenLine(CD,AD)&PerpendicularBetweenLine(BA,DA)', 'conclusion': ['ParallelBetweenLine(AB,CD)']}, {'theorem': 'parallel_property_collinear_extend(1,AB,CD,M)', 'premise': 'ParallelBetweenLine(AB,CD)&Collinear(MAB)', 'conclusion': ['ParallelBetweenLine(MA,CD)', 'ParallelBetweenLine(MB,CD)']}, {'theorem': 'parallel_property_collinear_extend(2,AB,CD,M)', 'premise': 'ParallelBetweenLine(AB,CD)&Collinear(ABM)', 'conclusion': ['ParallelBetweenLine(AM,CD)', 'ParallelBetweenLine(BM,CD)']}, {'theorem': 'parallel_property_collinear_extend(3,AB,CD,M)', 'premise': 'ParallelBetweenLine(AB,CD)&Collinear(AMB)', 'conclusion': ['ParallelBetweenLine(AM,CD)', 'ParallelBetweenLine(MB,CD)']}, {'theorem': 'parallel_property_corresponding_angle(1,AB,CD,E)', 'premise': 'ParallelBetweenLine(AB,CD)&Collinear(EAC)', 'conclusion': ['Equal(MeasureOfAngle(EAB),MeasureOfAngle(ACD))']}, {'theorem': 'parallel_property_corresponding_angle(2,AB,CD,E)', 'premise': 'ParallelBetweenLine(AB,CD)&Collinear(ACE)', 'conclusion': ['Equal(MeasureOfAngle(BAC),MeasureOfAngle(DCE))']}, {'theorem': 'parallel_property_alternate_interior_angle(1,AB,CD)', 'premise': 'ParallelBetweenLine(AB,CD)&Line(AD)', 'conclusion': ['Equal(MeasureOfAngle(BAD),MeasureOfAngle(CDA))']}, {'theorem': 'parallel_property_alternate_interior_angle(2,AB,CD)', 'premise': 'ParallelBetweenLine(AB,CD)&Line(BC)', 'conclusion': ['Equal(MeasureOfAngle(CBA),MeasureOfAngle(BCD))']}, {'theorem': 'parallel_property_ipsilateral_internal_angle(1,AB,CD)', 'premise': 'ParallelBetweenLine(AB,CD)&Line(AC)', 'conclusion': ['Equal(Add(MeasureOfAngle(BAC),MeasureOfAngle(ACD)),180)']}, {'theorem': 'parallel_property_par_per(1,AB,CD)', 'premise': 'ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(AC,DC)', 'conclusion': ['PerpendicularBetweenLine(BA,CA)']}, {'theorem': 'parallel_property_par_per(2,AB,CD)', 'premise': 'ParallelBetweenLine(AB,CD)&PerpendicularBetweenLine(BA,CA)', 'conclusion': ['PerpendicularBetweenLine(AC,DC)']}, {'theorem': 'perpendicular_judgment_angle(1,AO,CO)', 'premise': 'Angle(AOC)&Equal(MeasureOfAngle(AOC),90)', 'conclusion': ['PerpendicularBetweenLine(AO,CO)']}, {'theorem': 'perpendicular_bisector_judgment_per_and_mid(1,CO,AB)', 'premise': 'Collinear(AOB)&Angle(AOC)&Equal(MeasureOfAngle(AOC),90)&Equal(LengthOfLine(AO),LengthOfLine(BO))', 'conclusion': ['IsPerpendicularBisectorOfLine(CO,AB)']}, {'theorem': 'perpendicular_bisector_judgment_distance_equal(1,CO,AB)', 'premise': 'Collinear(AOB)&Angle(AOC)&Equal(MeasureOfAngle(AOC),90)&Equal(LengthOfLine(CA),LengthOfLine(CB))', 'conclusion': ['IsPerpendicularBisectorOfLine(CO,AB)']}, {'theorem': 'perpendicular_bisector_property_distance_equal(1,CO,AB)', 'premise': 'IsPerpendicularBisectorOfLine(CO,AB)', 'conclusion': ['Equal(LengthOfLine(CA),LengthOfLine(CB))']}, {'theorem': 'perpendicular_bisector_property_bisector(1,CO,AB)', 'premise': 'IsPerpendicularBisectorOfLine(CO,AB)&Angle(BCO)&Angle(OCA)', 'conclusion': ['IsBisectorOfAngle(CO,BCA)']}, {'theorem': 'angle_addition(1,ABC,CBD)', 'premise': 'Angle(ABC)&Angle(CBD)&Angle(ABD)', 'conclusion': ['Equal(MeasureOfAngle(ABD),Add(MeasureOfAngle(ABC),MeasureOfAngle(CBD)))']}, {'theorem': 'flat_angle(1,ABC)', 'premise': 'Collinear(ABC)', 'conclusion': ['Equal(MeasureOfAngle(ABC),180)']}, {'theorem': 'adjacent_complementary_angle(1,AOB,BOC)', 'premise': 'Collinear(AOC)&Angle(AOB)&Angle(BOC)', 'conclusion': ['Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOC)),180)']}, {'theorem': 'round_angle(1,AOB,BOA)', 'premise': 'Angle(AOB)&Angle(BOA)', 'conclusion': ['Equal(Add(MeasureOfAngle(AOB),MeasureOfAngle(BOA)),360)']}, {'theorem': 'vertical_angle(1,AOC,BOD)', 'premise': 'Collinear(AOB)&Collinear(COD)&Angle(AOC)&Angle(BOD)', 'conclusion': ['Equal(MeasureOfAngle(AOC),MeasureOfAngle(BOD))']}, {'theorem': 'bisector_of_angle_judgment_angle_equal(1,BD,ABC)', 'premise': 'Angle(ABD)&Angle(DBC)&Equal(MeasureOfAngle(ABD),MeasureOfAngle(DBC))', 'conclusion': ['IsBisectorOfAngle(BD,ABC)']}, {'theorem': 'bisector_of_angle_property_distance_equal(1,BD,ABC)', 'premise': 'IsBisectorOfAngle(BD,ABC)&Equal(MeasureOfAngle(BCD),90)&Equal(MeasureOfAngle(DAB),90)', 'conclusion': ['Equal(LengthOfLine(DA),LengthOfLine(DC))']}, {'theorem': 'bisector_of_angle_property_line_ratio(1,BD,ABC)', 'premise': 'IsBisectorOfAngle(BD,ABC)&Collinear(CDA)', 'conclusion': ['Equal(Mul(LengthOfLine(CD),LengthOfLine(BA)),Mul(LengthOfLine(DA),LengthOfLine(BC)))']}, {'theorem': 'bisector_of_angle_property_length_formula(1,BD,ABC)', 'premise': 'IsBisectorOfAngle(BD,ABC)&Collinear(CDA)', 'conclusion': ['Equal(Mul(LengthOfLine(BD),LengthOfLine(BD)),Sub(Mul(LengthOfLine(BC),LengthOfLine(BA)),Mul(LengthOfLine(DC),LengthOfLine(DA))))']}, {'theorem': 'triangle_property_angle_sum(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA),MeasureOfAngle(CAB)),180)']}, {'theorem': 'sine_theorem(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(Mul(LengthOfLine(AB),Sin(MeasureOfAngle(ABC))),Mul(LengthOfLine(AC),Sin(MeasureOfAngle(BCA))))']}, {'theorem': 'cosine_theorem(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(Add(Pow(LengthOfLine(BC),2),Mul(2,LengthOfLine(AB),LengthOfLine(AC),Cos(MeasureOfAngle(CAB)))),Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(AC),2)))']}, {'theorem': 'triangle_perimeter_formula(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(PerimeterOfTriangle(ABC),Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CA)))']}, {'theorem': 'triangle_area_formula_common(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(AreaOfTriangle(ABC),Mul(HeightOfTriangle(ABC),LengthOfLine(BC),1/2))']}, {'theorem': 'triangle_area_formula_sine(1,ABC)', 'premise': 'Polygon(ABC)', 'conclusion': ['Equal(AreaOfTriangle(ABC),Mul(LengthOfLine(AB),LengthOfLine(AC),Sin(MeasureOfAngle(CAB)),1/2))']}, {'theorem': 'median_of_triangle_judgment(1,AD,ABC)', 'premise': 'Polygon(ABC)&Line(AD)&Collinear(BDC)&Equal(LengthOfLine(BD),LengthOfLine(CD))', 'conclusion': ['IsMedianOfTriangle(AD,ABC)']}, {'theorem': 'altitude_of_triangle_judgment(1,AD,ABC)', 'premise': 'Polygon(ABC)&Line(AD)&Collinear(BDC)&Equal(MeasureOfAngle(BDA),90)', 'conclusion': ['IsAltitudeOfTriangle(AD,ABC)']}, {'theorem': 'altitude_of_triangle_judgment(2,AD,ABC)', 'premise': 'Polygon(ABC)&Line(AD)&Collinear(DBC)&Equal(MeasureOfAngle(ADB),90)', 'conclusion': ['IsAltitudeOfTriangle(AD,ABC)']}, {'theorem': 'altitude_of_triangle_judgment(3,AD,ABC)', 'premise': 'Polygon(ABC)&Line(AD)&Collinear(BCD)&Equal(MeasureOfAngle(CDA),90)', 'conclusion': ['IsAltitudeOfTriangle(AD,ABC)']}, {'theorem': 'midsegment_of_triangle_judgment_midpoint(1,DE,ABC)', 'premise': 'Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&Equal(LengthOfLine(AD),LengthOfLine(BD))&Equal(LengthOfLine(AE),LengthOfLine(CE))', 'conclusion': ['IsMidsegmentOfTriangle(DE,ABC)']}, {'theorem': 'midsegment_of_triangle_judgment_parallel(1,DE,ABC)', 'premise': 'Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(AD),LengthOfLine(BD))', 'conclusion': ['IsMidsegmentOfTriangle(DE,ABC)']}, {'theorem': 'midsegment_of_triangle_judgment_parallel(2,DE,ABC)', 'premise': 'Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(AE),LengthOfLine(CE))', 'conclusion': ['IsMidsegmentOfTriangle(DE,ABC)']}, {'theorem': 'midsegment_of_triangle_judgment_parallel(3,DE,ABC)', 'premise': 'Polygon(ABC)&Collinear(ADB)&Collinear(AEC)&Line(DE)&ParallelBetweenLine(DE,BC)&Equal(LengthOfLine(BC),Mul(LengthOfLine(DE),2))', 'conclusion': ['IsMidsegmentOfTriangle(DE,ABC)']}, {'theorem': 'midsegment_of_triangle_property_parallel(1,DE,ABC)', 'premise': 'IsMidsegmentOfTriangle(DE,ABC)', 'conclusion': ['ParallelBetweenLine(DE,BC)']}, {'theorem': 'midsegment_of_triangle_property_length(1,DE,ABC)', 'premise': 'IsMidsegmentOfTriangle(DE,ABC)', 'conclusion': ['Equal(LengthOfLine(DE),Mul(LengthOfLine(BC),1/2))']}, {'theorem': 'circumcenter_of_triangle_judgment_intersection(1,O,ABC,D,E)', 'premise': 'Polygon(ABC)&Collinear(ADB)&Collinear(CEA)&IsPerpendicularBisectorOfLine(OD,AB)&IsPerpendicularBisectorOfLine(OE,CA)', 'conclusion': ['IsCircumcenterOfTriangle(O,ABC)']}, {'theorem': 'circumcenter_of_triangle_property_intersection(1,O,ABC,D)', 'premise': 'IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&Line(OD)&Equal(MeasureOfAngle(BDO),90)', 'conclusion': ['IsPerpendicularBisectorOfLine(OD,BC)']}, {'theorem': 'circumcenter_of_triangle_property_intersection(2,O,ABC,D)', 'premise': 'IsCircumcenterOfTriangle(O,ABC)&Collinear(BDC)&Line(OD)&Equal(LengthOfLine(BD),LengthOfLine(CD))', 'conclusion': ['IsPerpendicularBisectorOfLine(OD,BC)']}, {'theorem': 'incenter_of_triangle_judgment_intersection(1,O,ABC)', 'premise': 'Polygon(ABC)&IsBisectorOfAngle(BO,ABC)&IsBisectorOfAngle(CO,BCA)', 'conclusion': ['IsIncenterOfTriangle(O,ABC)']}, {'theorem': 'centroid_of_triangle_judgment_intersection(1,O,ABC,M,N)', 'premise': 'IsMedianOfTriangle(CM,CAB)&IsMedianOfTriangle(BN,BCA)&Collinear(COM)&Collinear(BON)', 'conclusion': ['IsCentroidOfTriangle(O,ABC)']}, {'theorem': 'centroid_of_triangle_property_intersection(1,O,ABC,M)', 'premise': 'IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)', 'conclusion': ['IsMedianOfTriangle(AM,ABC)']}, {'theorem': 'centroid_of_triangle_property_line_ratio(1,O,ABC,M)', 'premise': 'IsCentroidOfTriangle(O,ABC)&Collinear(AOM)&Collinear(BMC)', 'conclusion': ['Equal(LengthOfLine(OA),Mul(LengthOfLine(OM),2))']}, {'theorem': 'orthocenter_of_triangle_judgment_intersection(1,O,ABC,D,E)', 'premise': 'IsAltitudeOfTriangle(CD,CAB)&IsAltitudeOfTriangle(BE,BCA)&Collinear(COD)&Collinear(BOE)', 'conclusion': ['IsOrthocenterOfTriangle(O,ABC)']}, {'theorem': 'orthocenter_of_triangle_property_intersection(1,O,ABC,D)', 'premise': 'IsOrthocenterOfTriangle(O,ABC)&Collinear(AOD)&Collinear(BDC)', 'conclusion': ['IsAltitudeOfTriangle(AD,ABC)']}, {'theorem': 'orthocenter_of_triangle_property_angle(1,O,ABC)', 'premise': 'IsOrthocenterOfTriangle(O,ABC)&Angle(COB)', 'conclusion': ['Equal(MeasureOfAngle(COB),Add(MeasureOfAngle(ABC),MeasureOfAngle(BCA)))']}, {'theorem': 'congruent_triangle_judgment_sss(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(FD))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_judgment_sas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DE))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DF))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_judgment_aas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(AB),LengthOfLine(DE))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_judgment_aas(2,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(BC),LengthOfLine(EF))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_judgment_aas(3,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))&Equal(LengthOfLine(AC),LengthOfLine(DF))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_judgment_hl(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(LengthOfLine(AC),LengthOfLine(DF))&(Equal(LengthOfLine(AB),LengthOfLine(DE))|Equal(LengthOfLine(BC),LengthOfLine(EF)))', 'conclusion': ['CongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'congruent_triangle_property_line_equal(1,ABC,DEF)', 'premise': 'CongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(LengthOfLine(BC),LengthOfLine(EF))']}, {'theorem': 'congruent_triangle_property_angle_equal(1,ABC,DEF)', 'premise': 'CongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))']}, {'theorem': 'congruent_triangle_property_perimeter_equal(1,ABC,DEF)', 'premise': 'CongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))']}, {'theorem': 'congruent_triangle_property_area_equal(1,ABC,DEF)', 'premise': 'CongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))']}, {'theorem': 'congruent_triangle_property_exchange(1,ABC,DEF)', 'premise': 'CongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['CongruentBetweenTriangle(DEF,ABC)']}, {'theorem': 'mirror_congruent_triangle_judgment_sss(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(FD))&Equal(LengthOfLine(BC),LengthOfLine(EF))&Equal(LengthOfLine(CA),LengthOfLine(DE))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_judgment_sas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(LengthOfLine(AB),LengthOfLine(DF))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))&Equal(LengthOfLine(AC),LengthOfLine(DE))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_judgment_aas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(AB),LengthOfLine(DF))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_judgment_aas(2,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(BC),LengthOfLine(EF))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_judgment_aas(3,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))&Equal(LengthOfLine(CA),LengthOfLine(DE))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_judgment_hl(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(EFD),90)&Equal(LengthOfLine(AC),LengthOfLine(DE))&(Equal(LengthOfLine(BC),LengthOfLine(EF))|Equal(LengthOfLine(AB),LengthOfLine(DF)))', 'conclusion': ['MirrorCongruentBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_congruent_triangle_property_line_equal(1,ABC,DEF)', 'premise': 'MirrorCongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(LengthOfLine(BC),LengthOfLine(EF))']}, {'theorem': 'mirror_congruent_triangle_property_angle_equal(1,ABC,DEF)', 'premise': 'MirrorCongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))']}, {'theorem': 'mirror_congruent_triangle_property_perimeter_equal(1,ABC,DEF)', 'premise': 'MirrorCongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(PerimeterOfTriangle(ABC),PerimeterOfTriangle(DEF))']}, {'theorem': 'mirror_congruent_triangle_property_area_equal(1,ABC,DEF)', 'premise': 'MirrorCongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(AreaOfTriangle(ABC),AreaOfTriangle(DEF))']}, {'theorem': 'mirror_congruent_triangle_property_exchange(1,ABC,DEF)', 'premise': 'MirrorCongruentBetweenTriangle(ABC,DEF)', 'conclusion': ['MirrorCongruentBetweenTriangle(DEF,ABC)']}, {'theorem': 'similar_triangle_judgment_sss(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(DE),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(CA)))', 'conclusion': ['SimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'similar_triangle_judgment_sas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(DE),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))', 'conclusion': ['SimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'similar_triangle_judgment_aa(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(DEF))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(EFD))', 'conclusion': ['SimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'similar_triangle_judgment_hl(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DF)),Mul(LengthOfLine(AC),LengthOfLine(DE)))', 'conclusion': ['SimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'similar_triangle_judgment_hl(2,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&PerpendicularBetweenLine(AB,CB)&PerpendicularBetweenLine(DE,FE)&Equal(Mul(LengthOfLine(BC),LengthOfLine(DF)),Mul(LengthOfLine(AC),LengthOfLine(EF)))', 'conclusion': ['SimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'similar_triangle_property_ratio(1,ABC,DEF)', 'premise': 'SimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['SimilarBetweenTriangle(DEF,ABC)', 'Equal(Mul(RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(DEF,ABC)),1)']}, {'theorem': 'similar_triangle_property_line_ratio(1,ABC,DEF)', 'premise': 'SimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfSimilarTriangle(ABC,DEF)))']}, {'theorem': 'similar_triangle_property_angle_equal(1,ABC,DEF)', 'premise': 'SimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))']}, {'theorem': 'similar_triangle_property_perimeter_ratio(1,ABC,DEF)', 'premise': 'SimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF)))']}, {'theorem': 'similar_triangle_property_area_square_ratio(1,ABC,DEF)', 'premise': 'SimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfSimilarTriangle(ABC,DEF),RatioOfSimilarTriangle(ABC,DEF)))']}, {'theorem': 'mirror_similar_triangle_judgment_sss(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(EF)),Mul(LengthOfLine(FD),LengthOfLine(BC)))&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(FD),LengthOfLine(CA)))', 'conclusion': ['MirrorSimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_similar_triangle_judgment_sas(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))&Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))', 'conclusion': ['MirrorSimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_similar_triangle_judgment_aa(1,ABC,DEF)', 'premise': 'Polygon(ABC)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(EFD))&Equal(MeasureOfAngle(BCA),MeasureOfAngle(DEF))', 'conclusion': ['MirrorSimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_similar_triangle_judgment_hl(1,ABC,DEF)', 'premise': 'Polygon(BCA)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(DEF),90)&Equal(Mul(LengthOfLine(AB),LengthOfLine(DE)),Mul(LengthOfLine(DF),LengthOfLine(AC)))', 'conclusion': ['MirrorSimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_similar_triangle_judgment_hl(2,ABC,DEF)', 'premise': 'Polygon(BCA)&Polygon(DEF)&Equal(MeasureOfAngle(ABC),90)&Equal(MeasureOfAngle(EFD),90)&Equal(Mul(LengthOfLine(BC),LengthOfLine(DE)),Mul(LengthOfLine(AC),LengthOfLine(EF)))', 'conclusion': ['MirrorSimilarBetweenTriangle(ABC,DEF)']}, {'theorem': 'mirror_similar_triangle_property_ratio(1,ABC,DEF)', 'premise': 'MirrorSimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['MirrorSimilarBetweenTriangle(DEF,ABC)', 'Equal(Mul(RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(DEF,ABC)),1)']}, {'theorem': 'mirror_similar_triangle_property_line_ratio(1,ABC,DEF)', 'premise': 'MirrorSimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(LengthOfLine(BC),Mul(LengthOfLine(EF),RatioOfMirrorSimilarTriangle(ABC,DEF)))']}, {'theorem': 'mirror_similar_triangle_property_angle_equal(1,ABC,DEF)', 'premise': 'MirrorSimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(MeasureOfAngle(CAB),MeasureOfAngle(FDE))']}, {'theorem': 'mirror_similar_triangle_property_perimeter_ratio(1,ABC,DEF)', 'premise': 'MirrorSimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(PerimeterOfTriangle(ABC),Mul(PerimeterOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))']}, {'theorem': 'mirror_similar_triangle_property_area_square_ratio(1,ABC,DEF)', 'premise': 'MirrorSimilarBetweenTriangle(ABC,DEF)', 'conclusion': ['Equal(AreaOfTriangle(ABC),Mul(AreaOfTriangle(DEF),RatioOfMirrorSimilarTriangle(ABC,DEF),RatioOfMirrorSimilarTriangle(ABC,DEF)))']}, {'theorem': 'right_triangle_judgment_angle(1,ABC)', 'premise': 'Polygon(ABC)&Equal(MeasureOfAngle(ABC),90)', 'conclusion': ['RightTriangle(ABC)']}, {'theorem': 'right_triangle_judgment_pythagorean_inverse(1,ABC)', 'premise': 'Polygon(ABC)&Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))', 'conclusion': ['RightTriangle(ABC)']}, {'theorem': 'right_triangle_property_pythagorean(1,ABC)', 'premise': 'RightTriangle(ABC)', 'conclusion': ['Equal(Add(Pow(LengthOfLine(AB),2),Pow(LengthOfLine(BC),2)),Pow(LengthOfLine(AC),2))']}, {'theorem': 'right_triangle_property_length_of_median(1,ABC,M)', 'premise': 'RightTriangle(ABC)&IsMedianOfTriangle(BM,BCA)', 'conclusion': ['Equal(Mul(LengthOfLine(BM),2),LengthOfLine(CA))']}, {'theorem': 'isosceles_triangle_judgment_line_equal(1,ABC)', 'premise': 'Polygon(ABC)&Equal(LengthOfLine(AB),LengthOfLine(AC))', 'conclusion': ['IsoscelesTriangle(ABC)']}, {'theorem': 'isosceles_triangle_judgment_angle_equal(1,ABC)', 'premise': 'Polygon(ABC)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))', 'conclusion': ['IsoscelesTriangle(ABC)']}, {'theorem': 'isosceles_triangle_property_angle_equal(1,ABC)', 'premise': 'IsoscelesTriangle(ABC)', 'conclusion': ['Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCA))']}, {'theorem': 'isosceles_triangle_property_line_coincidence(1,ABC,M)', 'premise': 'IsoscelesTriangle(ABC)&IsAltitudeOfTriangle(AM,ABC)', 'conclusion': ['IsMedianOfTriangle(AM,ABC)', 'IsBisectorOfAngle(AM,CAB)']}, {'theorem': 'isosceles_triangle_property_line_coincidence(2,ABC,M)', 'premise': 'IsoscelesTriangle(ABC)&IsMedianOfTriangle(AM,ABC)', 'conclusion': ['IsAltitudeOfTriangle(AM,ABC)', 'IsBisectorOfAngle(AM,CAB)']}, {'theorem': 'isosceles_triangle_property_line_coincidence(3,ABC,M)', 'premise': 'IsoscelesTriangle(ABC)&Collinear(BMC)&IsBisectorOfAngle(AM,CAB)', 'conclusion': ['IsAltitudeOfTriangle(AM,ABC)', 'IsMedianOfTriangle(AM,ABC)']}, {'theorem': 'isosceles_right_triangle_judgment_isosceles_and_right(1,ABC)', 'premise': 'IsoscelesTriangle(ABC)&RightTriangle(CAB)', 'conclusion': ['IsoscelesRightTriangle(ABC)']}, {'theorem': 'isosceles_right_triangle_property_angle(1,ABC)', 'premise': 'IsoscelesRightTriangle(ABC)', 'conclusion': ['Equal(MeasureOfAngle(ABC),45)', 'Equal(MeasureOfAngle(BCA),45)']}, {'theorem': 'equilateral_triangle_judgment_isosceles_and_isosceles(1,ABC)', 'premise': 'IsoscelesTriangle(ABC)&IsoscelesTriangle(BCA)', 'conclusion': ['EquilateralTriangle(ABC)']}, {'theorem': 'equilateral_triangle_property_angle(1,ABC)', 'premise': 'EquilateralTriangle(ABC)', 'conclusion': ['Equal(MeasureOfAngle(CAB),60)']}, {'theorem': 'quadrilateral_property_angle_sum(1,ABCD)', 'premise': 'Polygon(ABCD)', 'conclusion': ['Equal(Add(MeasureOfAngle(ABC),MeasureOfAngle(BCD),MeasureOfAngle(CDA),MeasureOfAngle(DAB)),360)']}, {'theorem': 'quadrilateral_perimeter_formula(1,ABCD)', 'premise': 'Polygon(ABCD)', 'conclusion': ['Equal(Add(LengthOfLine(AB),LengthOfLine(BC),LengthOfLine(CD),LengthOfLine(DA)),PerimeterOfQuadrilateral(ABCD))']}, {'theorem': 'altitude_of_quadrilateral_judgment(1,EF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(BFC)&Equal(MeasureOfAngle(BFE),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(EF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment(2,EF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(FBC)&Equal(MeasureOfAngle(EFB),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(EF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment(3,EF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(EF)&Collinear(AED)&Collinear(BCF)&Equal(MeasureOfAngle(CFE),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(EF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_left_vertex(1,AF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(BFC)&Equal(MeasureOfAngle(BFA),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(AF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_left_vertex(2,AF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(FBC)&Equal(MeasureOfAngle(AFB),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(AF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_left_vertex(3,AF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AF)&Collinear(BCF)&Equal(MeasureOfAngle(CFA),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(AF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_right_vertex(1,DF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(BFC)&Equal(MeasureOfAngle(BFD),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(DF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_right_vertex(2,DF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(FBC)&Equal(MeasureOfAngle(DFB),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(DF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_right_vertex(3,DF,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DF)&Collinear(BCF)&Equal(MeasureOfAngle(CFD),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(DF,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_diagonal(1,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(AC)&Equal(MeasureOfAngle(BCA),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(AC,ABCD)']}, {'theorem': 'altitude_of_quadrilateral_judgment_diagonal(2,ABCD)', 'premise': '(Parallelogram(ABCD)|Trapezoid(ABCD))&Line(DB)&Equal(MeasureOfAngle(DBC),90)', 'conclusion': ['IsAltitudeOfQuadrilateral(DB,ABCD)']}, {'theorem': 'midsegment_of_quadrilateral_judgment_midpoint(1,EF,ABCD)', 'premise': 'Collinear(AEB)&Collinear(DFC)&Line(EF)&Equal(LengthOfLine(AE),LengthOfLine(BE))&Equal(LengthOfLine(DF),LengthOfLine(CF))', 'conclusion': ['IsMidsegmentOfQuadrilateral(EF,ABCD)']}, {'theorem': 'midsegment_of_quadrilateral_judgment_parallel(1,EF,ABCD)', 'premise': 'Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(LengthOfLine(AE),LengthOfLine(BE))', 'conclusion': ['IsMidsegmentOfQuadrilateral(EF,ABCD)']}, {'theorem': 'midsegment_of_quadrilateral_judgment_parallel(2,EF,ABCD)', 'premise': 'Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(LengthOfLine(DF),LengthOfLine(CF))', 'conclusion': ['IsMidsegmentOfQuadrilateral(EF,ABCD)']}, {'theorem': 'midsegment_of_quadrilateral_judgment_parallel(3,EF,ABCD)', 'premise': 'Collinear(AEB)&Collinear(DFC)&Line(EF)&(Trapezoid(ABCD)|Parallelogram(ABCD))&ParallelBetweenLine(EF,BC)&Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2))', 'conclusion': ['IsMidsegmentOfQuadrilateral(EF,ABCD)']}, {'theorem': 'midsegment_of_quadrilateral_property_length(1,EF,ABCD)', 'premise': 'IsMidsegmentOfQuadrilateral(EF,ABCD)', 'conclusion': ['Equal(Add(LengthOfLine(AD),LengthOfLine(BC)),Mul(LengthOfLine(EF),2))']}, {'theorem': 'midsegment_of_quadrilateral_property_parallel(1,EF,ABCD)', 'premise': 'IsMidsegmentOfQuadrilateral(EF,ABCD)&(Trapezoid(ABCD)|Parallelogram(ABCD))', 'conclusion': ['ParallelBetweenLine(AD,EF)', 'ParallelBetweenLine(EF,BC)']}, {'theorem': 'circumcenter_of_quadrilateral_property_intersection(1,O,ABCD,E)', 'premise': 'IsCircumcenterOfQuadrilateral(O,ABCD)&Collinear(BEC)&Equal(MeasureOfAngle(DEO),90)', 'conclusion': ['IsPerpendicularBisectorOfLine(OE,BC)']}, {'theorem': 'circumcenter_of_quadrilateral_property_intersection(2,O,ABCD,E)', 'premise': 'IsCircumcenterOfQuadrilateral(O,ABCD)&Equal(LengthOfLine(BE),LengthOfLine(CE))', 'conclusion': ['IsPerpendicularBisectorOfLine(OE,BC)']}, {'theorem': 'congruent_quadrilateral_property_line_equal(1,ABCD,EFGH)', 'premise': 'CongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(LengthOfLine(AB),LengthOfLine(EF))']}, {'theorem': 'congruent_quadrilateral_property_angle_equal(1,ABCD,EFGH)', 'premise': 'CongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))']}, {'theorem': 'congruent_quadrilateral_property_perimeter_equal(1,ABCD,EFGH)', 'premise': 'CongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(PerimeterOfQuadrilateral(ABC),PerimeterOfQuadrilateral(DEF))']}, {'theorem': 'congruent_quadrilateral_property_area_equal(1,ABCD,EFGH)', 'premise': 'CongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABC),AreaOfQuadrilateral(DEF))']}, {'theorem': 'congruent_quadrilateral_property_exchange(1,ABCD,EFGH)', 'premise': 'CongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['CongruentBetweenQuadrilateral(EFGH,ABCD)']}, {'theorem': 'mirror_congruent_quadrilateral_property_line_equal(1,ABCD,EFGH)', 'premise': 'MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(LengthOfLine(AB),LengthOfLine(EH))']}, {'theorem': 'mirror_congruent_quadrilateral_property_angle_equal(1,ABCD,EFGH)', 'premise': 'MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))']}, {'theorem': 'mirror_congruent_quadrilateral_property_perimeter_equal(1,ABCD,EFGH)', 'premise': 'MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(PerimeterOfQuadrilateral(ABCD),PerimeterOfQuadrilateral(EFGH))']}, {'theorem': 'mirror_congruent_quadrilateral_property_area_equal(1,ABCD,EFGH)', 'premise': 'MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),AreaOfQuadrilateral(EFGH))']}, {'theorem': 'mirror_congruent_quadrilateral_property_exchange(1,ABCD,EFGHF)', 'premise': 'MirrorCongruentBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['MirrorCongruentBetweenQuadrilateral(EFGH,ABCD)']}, {'theorem': 'similar_quadrilateral_property_ratio(1,ABCD,EFGH)', 'premise': 'SimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['SimilarBetweenQuadrilateral(EFGH,ABCD)', 'Equal(Mul(RatioOfSimilarQuadrilateral(ABCD,EFGH),RatioOfSimilarQuadrilateral(EFGH,ABCD)),1)']}, {'theorem': 'similar_quadrilateral_property_line_ratio(1,ABCD,EFGH)', 'premise': 'SimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(LengthOfLine(AB),Mul(LengthOfLine(EF),RatioOfSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'similar_quadrilateral_property_angle_equal(1,ABCD,EFGH)', 'premise': 'SimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))']}, {'theorem': 'similar_quadrilateral_property_perimeter_ratio(1,ABCD,EFGH)', 'premise': 'SimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(PerimeterOfQuadrilateral(ABCD),Mul(PerimeterOfQuadrilateral(EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'similar_quadrilateral_property_area_square_ratio(1,ABCD,EFGH)', 'premise': 'SimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(AreaOfQuadrilateral(EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH),RatioOfSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'mirror_similar_quadrilateral_property_ratio(1,ABCD,EFGH)', 'premise': 'MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['MirrorSimilarBetweenQuadrilateral(EFGH,ABCD)', 'Equal(Mul(RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH),RatioOfMirrorSimilarQuadrilateral(EFGH,ABCD)),1)']}, {'theorem': 'mirror_similar_quadrilateral_property_line_ratio(1,ABCD,EFGH)', 'premise': 'MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(LengthOfLine(AB),Mul(LengthOfLine(EH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'mirror_similar_quadrilateral_property_angle_equal(1,ABCD,EFGH)', 'premise': 'MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(MeasureOfAngle(DAB),MeasureOfAngle(HEF))']}, {'theorem': 'mirror_similar_quadrilateral_property_perimeter_ratio(1,ABCD,EFGH)', 'premise': 'MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(PerimeterOfQuadrilateral(ABCD),Mul(PerimeterOfQuadrilateral(EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'mirror_similar_quadrilateral_property_area_square_ratio(1,ABCD,EFGH)', 'premise': 'MirrorSimilarBetweenQuadrilateral(ABCD,EFGH)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(AreaOfQuadrilateral(EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH),RatioOfMirrorSimilarQuadrilateral(ABCD,EFGH)))']}, {'theorem': 'parallelogram_judgment_parallel_and_parallel(1,ABCD)', 'premise': 'Polygon(ABCD)&ParallelBetweenLine(AD,BC)&ParallelBetweenLine(BA,CD)', 'conclusion': ['Parallelogram(ABCD)']}, {'theorem': 'parallelogram_judgment_parallel_and_equal(1,ABCD)', 'premise': 'Polygon(ABCD)&ParallelBetweenLine(BA,CD)&Equal(LengthOfLine(BA),LengthOfLine(CD))', 'conclusion': ['Parallelogram(ABCD)']}, {'theorem': 'parallelogram_judgment_equal_and_equal(1,ABCD)', 'premise': 'Polygon(ABCD)&Equal(LengthOfLine(AD),LengthOfLine(BC))&Equal(LengthOfLine(BA),LengthOfLine(CD))', 'conclusion': ['Parallelogram(ABCD)']}, {'theorem': 'parallelogram_judgment_angle_and_angle(1,ABCD)', 'premise': 'Polygon(ABCD)&Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))&Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))', 'conclusion': ['Parallelogram(ABCD)']}, {'theorem': 'parallelogram_judgment_diagonal_bisection(1,ABCD,O)', 'premise': 'Polygon(ABCD)&Collinear(AOC)&Collinear(BOD)&IsMidpointOfLine(O,AC)&IsMidpointOfLine(O,BD)', 'conclusion': ['Parallelogram(ABCD)']}, {'theorem': 'parallelogram_property_opposite_line_equal(1,ABCD)', 'premise': 'Parallelogram(ABCD)', 'conclusion': ['Equal(LengthOfLine(BA),LengthOfLine(CD))']}, {'theorem': 'parallelogram_property_opposite_angle_equal(1,ABCD)', 'premise': 'Parallelogram(ABCD)', 'conclusion': ['Equal(MeasureOfAngle(DAB),MeasureOfAngle(BCD))']}, {'theorem': 'parallelogram_property_diagonal_bisection(1,ABCD,O)', 'premise': 'Parallelogram(ABCD)&Collinear(AOC)&Collinear(BOD)', 'conclusion': ['IsMidpointOfLine(O,AC)']}, {'theorem': 'parallelogram_area_formula_common(1,ABCD)', 'premise': 'Parallelogram(ABCD)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(HeightOfQuadrilateral(ABCD),LengthOfLine(BC)))']}, {'theorem': 'parallelogram_area_formula_sine(1,ABCD)', 'premise': 'Parallelogram(ABCD)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))']}, {'theorem': 'kite_judgment_equal_and_equal(1,ABCD)', 'premise': 'Polygon(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(AD))&Equal(LengthOfLine(CB),LengthOfLine(CD))', 'conclusion': ['Kite(ABCD)']}, {'theorem': 'kite_property_diagonal_perpendicular_bisection(1,ABCD,O)', 'premise': 'Kite(ABCD)&Collinear(AOC)&Collinear(BOD)', 'conclusion': ['IsPerpendicularBisectorOfLine(AO,BD)']}, {'theorem': 'kite_property_opposite_angle_equal(1,ABCD)', 'premise': 'Kite(ABCD)', 'conclusion': ['Equal(MeasureOfAngle(ABC),MeasureOfAngle(CDA))']}, {'theorem': 'kite_area_formula_diagonal(1,ABCD)', 'premise': 'Kite(ABCD)&Line(BD)&Line(AC)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(BD),LengthOfLine(AC),1/2))']}, {'theorem': 'kite_area_formula_sine(1,ABCD)', 'premise': 'Kite(ABCD)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(LengthOfLine(AB),LengthOfLine(BC),Sin(MeasureOfAngle(ABC))))']}, {'theorem': 'rectangle_judgment_right_angle(1,ABCD)', 'premise': 'Parallelogram(ABCD)&Equal(MeasureOfAngle(ABC),90)', 'conclusion': ['Rectangle(ABCD)']}, {'theorem': 'rectangle_judgment_diagonal_equal(1,ABCD)', 'premise': 'Parallelogram(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))', 'conclusion': ['Rectangle(ABCD)']}, {'theorem': 'rectangle_property_diagonal_equal(1,ABCD)', 'premise': 'Rectangle(ABCD)&Line(AC)&Line(BD)', 'conclusion': ['Equal(LengthOfLine(AC),LengthOfLine(BD))']}, {'theorem': 'rhombus_judgment_parallelogram_and_kite(1,ABCD)', 'premise': 'Parallelogram(ABCD)&Kite(ABCD)', 'conclusion': ['Rhombus(ABCD)']}, {'theorem': 'square_judgment_rhombus_and_rectangle(1,ABCD)', 'premise': 'Rhombus(ABCD)&Rectangle(ABCD)', 'conclusion': ['Square(ABCD)']}, {'theorem': 'trapezoid_judgment_parallel(1,ABCD)', 'premise': 'Polygon(ABCD)&ParallelBetweenLine(AD,BC)&~ParallelBetweenLine(BA,CD)', 'conclusion': ['Trapezoid(ABCD)']}, {'theorem': 'trapezoid_area_formula(1,ABCD)', 'premise': 'Trapezoid(ABCD)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(Add(LengthOfLine(AD),LengthOfLine(BC)),HeightOfQuadrilateral(ABCD),1/2))']}, {'theorem': 'right_trapezoid_judgment_right_angle(1,ABCD)', 'premise': 'Trapezoid(ABCD)&Equal(MeasureOfAngle(ABC),90)', 'conclusion': ['RightTrapezoid(ABCD)']}, {'theorem': 'right_trapezoid_area_formular(1,ABCD)', 'premise': 'RightTrapezoid(ABCD)', 'conclusion': ['Equal(AreaOfQuadrilateral(ABCD),Mul(Add(LengthOfLine(AD),LengthOfLine(BC)),LengthOfLine(AB),1/2))']}, {'theorem': 'isosceles_trapezoid_judgment_line_equal(1,ABCD)', 'premise': 'Trapezoid(ABCD)&Equal(LengthOfLine(AB),LengthOfLine(CD))', 'conclusion': ['IsoscelesTrapezoid(ABCD)']}, {'theorem': 'isosceles_trapezoid_judgment_angle_equal(1,ABCD)', 'premise': 'Trapezoid(ABCD)&Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))', 'conclusion': ['IsoscelesTrapezoid(ABCD)']}, {'theorem': 'isosceles_trapezoid_judgment_diagonal_equal(1,ABCD)', 'premise': 'Trapezoid(ABCD)&Line(AC)&Line(BD)&Equal(LengthOfLine(AC),LengthOfLine(BD))', 'conclusion': ['IsoscelesTrapezoid(ABCD)']}, {'theorem': 'isosceles_trapezoid_property_angle_equal(1,ABCD)', 'premise': 'IsoscelesTrapezoid(ABCD)', 'conclusion': ['Equal(MeasureOfAngle(ABC),MeasureOfAngle(BCD))']}, {'theorem': 'isosceles_trapezoid_property_diagonal_equal(1,ABCD)', 'premise': 'IsoscelesTrapezoid(ABCD)', 'conclusion': ['Equal(LengthOfLine(AC),LengthOfLine(BD))']}, {'theorem': 'round_arc(1,OAB,OBA)', 'premise': 'Arc(OAB)&Arc(OBA)', 'conclusion': ['Equal(Add(MeasureOfArc(OAB),MeasureOfArc(OBA)),360)']}, {'theorem': 'arc_addition_length(1,OAB,OBC)', 'premise': 'Arc(OAB)&Arc(OBC)&Arc(OAC)', 'conclusion': ['Equal(LengthOfArc(OAC),Add(LengthOfArc(OAB),LengthOfArc(OBC)))']}, {'theorem': 'arc_addition_measure(1,OAB,OBC)', 'premise': 'Arc(OAB)&Arc(OBC)&Arc(OAC)', 'conclusion': ['Equal(MeasureOfArc(OAC),Add(MeasureOfArc(OAB),MeasureOfArc(OBC)))']}, {'theorem': 'arc_property_center_angle(1,OAB,P)', 'premise': 'Arc(OAB)&Angle(BPA)&IsCentreOfCircle(P,O)', 'conclusion': ['Equal(MeasureOfArc(OAB),MeasureOfAngle(BPA))']}, {'theorem': 'arc_property_circumference_angle_external(1,OAB,C)', 'premise': 'Cocircular(O,ABC)&Angle(BCA)', 'conclusion': ['Equal(MeasureOfAngle(BCA),Mul(MeasureOfArc(OAB),1/2))']}, {'theorem': 'arc_property_circumference_angle_internal(1,OAB,D)', 'premise': 'Cocircular(O,ADB)&Angle(ADB)', 'conclusion': ['Equal(MeasureOfAngle(ADB),Sub(180,Mul(MeasureOfArc(OAB),1/2)))']}, {'theorem': 'arc_length_formula(1,OAB)', 'premise': 'Arc(OAB)', 'conclusion': ['Equal(LengthOfArc(OAB),Mul(MeasureOfArc(OAB),1/180*pi,RadiusOfCircle(O)))']}, {'theorem': 'congruent_arc_judgment_length_equal(1,XAB,YCD)', 'premise': 'Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Equal(LengthOfArc(XAB),LengthOfArc(YCD))', 'conclusion': ['CongruentBetweenArc(XAB,YCD)']}, {'theorem': 'congruent_arc_judgment_measure_equal(1,XAB,YCD)', 'premise': 'Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Equal(MeasureOfArc(XAB),MeasureOfArc(YCD))', 'conclusion': ['CongruentBetweenArc(XAB,YCD)']}, {'theorem': 'congruent_arc_judgment_chord_equal(1,XAB,YCD)', 'premise': 'Arc(XAB)&Arc(YCD)&Cocircular(X,CD)&Line(AB)&Line(CD)&Equal(LengthOfLine(AB),LengthOfLine(CD))', 'conclusion': ['CongruentBetweenArc(XAB,YCD)']}, {'theorem': 'congruent_arc_property_length_equal(1,XAB,YCD)', 'premise': 'CongruentBetweenArc(XAB,YCD)', 'conclusion': ['Equal(LengthOfArc(XAB),LengthOfArc(YCD))']}, {'theorem': 'congruent_arc_property_measure_equal(1,XAB,YCD)', 'premise': 'CongruentBetweenArc(XAB,YCD)', 'conclusion': ['Equal(MeasureOfArc(XAB),MeasureOfArc(YCD))']}, {'theorem': 'congruent_arc_property_chord_equal(1,XAB,YCD)', 'premise': 'CongruentBetweenArc(XAB,YCD)&Line(AB)&Line(CD)', 'conclusion': ['Equal(LengthOfLine(AB),LengthOfLine(CD))']}, {'theorem': 'similar_arc_judgment_cocircular(1,XAB,YCD)', 'premise': 'Arc(XAB)&Arc(YCD)&Cocircular(X,CD)', 'conclusion': ['SimilarBetweenArc(XAB,YCD)']}, {'theorem': 'similar_arc_property_ratio(1,XAB,YCD)', 'premise': 'SimilarBetweenArc(XAB,YCD)&SimilarBetweenArc(YCD,XAB)', 'conclusion': ['Equal(Mul(RatioOfSimilarArc(XAB,YCD),RatioOfSimilarArc(YCD,XAB)),1)']}, {'theorem': 'similar_arc_property_length_ratio(1,XAB,YCD)', 'premise': 'SimilarBetweenArc(XAB,YCD)', 'conclusion': ['Equal(LengthOfArc(XAB),Mul(LengthOfArc(YCD),RatioOfSimilarArc(YCD,XAB)))']}, {'theorem': 'similar_arc_property_measure_ratio(1,XAB,YCD)', 'premise': 'SimilarBetweenArc(XAB,YCD)', 'conclusion': ['Equal(MeasureOfArc(XAB),Mul(MeasureOfArc(YCD),RatioOfSimilarArc(YCD,XAB)))']}, {'theorem': 'similar_arc_property_chord_ratio(1,XAB,YCD)', 'premise': 'SimilarBetweenArc(XAB,YCD)&Line(AB)&Line(CD)', 'conclusion': ['Equal(LengthOfLine(AB),Mul(LengthOfLine(CD),RatioOfSimilarArc(YCD,XAB)))']}, {'theorem': 'circle_property_length_of_radius_and_diameter(1,O)', 'premise': 'Circle(O)', 'conclusion': ['Equal(DiameterOfCircle(O),Mul(RadiusOfCircle(O),2))']}, {'theorem': 'circle_property_circular_power_chord_and_chord(1,AEB,CED,O)', 'premise': 'Cocircular(O,AB)&Cocircular(O,CD)&Collinear(AEB)&Collinear(CED)', 'conclusion': ['Equal(Mul(LengthOfLine(EC),LengthOfLine(ED)),Mul(LengthOfLine(EA),LengthOfLine(EB)))']}, {'theorem': 'circle_property_circular_power_tangent_and_segment_line(1,PA,PCD,O)', 'premise': 'IsTangentOfCircle(PA,O)&Cocircular(O,CD)&Collinear(PCD)', 'conclusion': ['Equal(Mul(LengthOfLine(PA),LengthOfLine(PA)),Mul(LengthOfLine(PC),LengthOfLine(PD)))']}, {'theorem': 'circle_property_circular_power_segment_and_segment_line(1,PAB,PCD,O)', 'premise': 'Cocircular(O,AB)&Cocircular(O,CD)&Collinear(PAB)&Collinear(PCD)', 'conclusion': ['Equal(Mul(LengthOfLine(PA),LengthOfLine(PB)),Mul(LengthOfLine(PC),LengthOfLine(PD)))']}, {'theorem': 'circle_property_circular_power_tangent_and_segment_angle(1,PA,PCD,O)', 'premise': 'Cocircular(O,ACD)&Collinear(PCD)', 'conclusion': ['Equal(Sub(MeasureOfArc(ODA),MeasureOfArc(OAC)),Mul(MeasureOfAngle(APC),2))']}, {'theorem': 'circle_property_circular_power_tangent_and_segment_angle(2,PA,PCD,O)', 'premise': 'Cocircular(O,CAD)&Collinear(PCD)', 'conclusion': ['Equal(Sub(MeasureOfArc(OAD),MeasureOfArc(OCA)),Mul(MeasureOfAngle(CPA),2))']}, {'theorem': 'circle_property_circular_power_segment_and_segment_angle(1,PAB,PCD,O)', 'premise': 'Cocircular(O,ACDB)&Collinear(PAB)&Collinear(PCD)', 'conclusion': ['Equal(Sub(MeasureOfArc(ODB),MeasureOfArc(OAC)),Mul(MeasureOfAngle(APC),2))']}, {'theorem': 'circle_property_circular_power_segment_and_segment_angle(2,PAB,PCD,O)', 'premise': 'Cocircular(O,CABD)&Collinear(PAB)&Collinear(PCD)', 'conclusion': ['Equal(Sub(MeasureOfArc(OBD),MeasureOfArc(OCA)),Mul(MeasureOfAngle(CPA),2))']}, {'theorem': 'circle_property_chord_perpendicular_bisect_chord(1,O,PM,AB)', 'premise': 'Cocircular(O,AB)&Collinear(AMB)&IsCentreOfCircle(P,O)&Equal(MeasureOfAngle(AMP),90)', 'conclusion': ['IsPerpendicularBisectorOfLine(PM,AB)']}, {'theorem': 'circle_property_chord_perpendicular_bisect_chord(2,O,PM,AB)', 'premise': 'Cocircular(O,AB)&Collinear(AMB)&IsCentreOfCircle(P,O)&Equal(LengthOfLine(AM),LengthOfLine(MB))', 'conclusion': ['IsPerpendicularBisectorOfLine(PM,AB)']}, {'theorem': 'circle_property_chord_perpendicular_bisect_arc(1,OAB,PMD)', 'premise': 'Arc(OAB)&Cocircular(O,ADB)&Collinear(AMB)&Collinear(PMD)&IsCentreOfCircle(P,O)&Equal(MeasureOfAngle(AMO),90)', 'conclusion': ['Equal(LengthOfArc(OAD),LengthOfArc(ODB))']}, {'theorem': 'circle_property_chord_perpendicular_bisect_arc(2,OAB,PMD)', 'premise': 'Arc(OAB)&Cocircular(O,ADB)&Collinear(AMB)&Collinear(PMD)&IsCentreOfCircle(P,O)&Equal(LengthOfLine(AM),LengthOfLine(MB))', 'conclusion': ['Equal(LengthOfArc(OAD),LengthOfArc(ODB))']}, {'theorem': 'circle_property_angle_of_osculation(1,OAB,P)', 'premise': 'Arc(OAB)&Angle(BAP)&IsTangentOfCircle(PA,O)', 'conclusion': ['Equal(MeasureOfAngle(BAP),Mul(MeasureOfArc(OAB),1/2))']}, {'theorem': 'circle_property_angle_of_osculation(2,OAB,P)', 'premise': 'Arc(OAB)&Angle(PBA)&IsTangentOfCircle(PB,O)', 'conclusion': ['Equal(MeasureOfAngle(PBA),Mul(MeasureOfArc(OAB),1/2))']}, {'theorem': 'circle_perimeter_formula(1,O)', 'premise': 'Circle(O)', 'conclusion': ['Equal(PerimeterOfCircle(O),Mul(2*pi,RadiusOfCircle(O)))']}, {'theorem': 'circle_area_formula(1,O)', 'premise': 'Circle(O)', 'conclusion': ['Equal(AreaOfCircle(O),Mul(pi,RadiusOfCircle(O),RadiusOfCircle(O)))']}, {'theorem': 'radius_of_circle_property_length_equal(1,PA,O)', 'premise': 'Cocircular(O,A)&Line(PA)&IsCentreOfCircle(P,O)', 'conclusion': ['Equal(LengthOfLine(PA),RadiusOfCircle(O))']}, {'theorem': 'diameter_of_circle_judgment_pass_centre(1,APB,O)', 'premise': 'Cocircular(O,AB)&Collinear(APB)&IsCentreOfCircle(P,O)', 'conclusion': ['IsDiameterOfCircle(AB,O)']}, {'theorem': 'diameter_of_circle_judgment_length_equal(1,AB,O)', 'premise': 'Cocircular(O,AB)&Equal(DiameterOfCircle(O),LengthOfLine(AB))', 'conclusion': ['IsDiameterOfCircle(AB,O)']}, {'theorem': 'diameter_of_circle_judgment_right_angle(1,BCA,O)', 'premise': 'Cocircular(O,BCA)&Equal(MeasureOfAngle(BCA),90)', 'conclusion': ['IsDiameterOfCircle(AB,O)']}, {'theorem': 'diameter_of_circle_property_length_equal(1,AB,O)', 'premise': 'IsDiameterOfCircle(AB,O)', 'conclusion': ['Equal(LengthOfLine(AB),DiameterOfCircle(O))']}, {'theorem': 'diameter_of_circle_property_right_angle(1,BCA,O)', 'premise': 'IsDiameterOfCircle(AB,O)&Cocircular(O,BCA)&Angle(BCA)', 'conclusion': ['PerpendicularBetweenLine(BC,AC)']}, {'theorem': 'tangent_of_circle_judgment_perpendicular(1,PA,O,Q)', 'premise': 'Cocircular(O,A)&IsCentreOfCircle(Q,O)&Angle(QAP)&Equal(MeasureOfAngle(QAP),90)', 'conclusion': ['IsTangentOfCircle(PA,O)']}, {'theorem': 'tangent_of_circle_judgment_perpendicular(2,PA,O,Q)', 'premise': 'Cocircular(O,A)&IsCentreOfCircle(Q,O)&Angle(PAQ)&Equal(MeasureOfAngle(PAQ),90)', 'conclusion': ['IsTangentOfCircle(PA,O)']}, {'theorem': 'tangent_of_circle_property_perpendicular(1,PA,O,Q)', 'premise': 'IsTangentOfCircle(PA,O)&Angle(QAP)&IsCentreOfCircle(Q,O)', 'conclusion': ['PerpendicularBetweenLine(QA,PA)']}, {'theorem': 'tangent_of_circle_property_perpendicular(2,PA,O,Q)', 'premise': 'IsTangentOfCircle(PA,O)&Angle(PAQ)&IsCentreOfCircle(Q,O)', 'conclusion': ['PerpendicularBetweenLine(PA,QA)']}, {'theorem': 'tangent_of_circle_property_length_equal(1,PA,PB,O)', 'premise': 'IsTangentOfCircle(PA,O)&IsTangentOfCircle(PB,O)', 'conclusion': ['Equal(LengthOfLine(PA),LengthOfLine(PB))']}, {'theorem': 'sector_perimeter_formula(1,OAB)', 'premise': 'Arc(OAB)', 'conclusion': ['Equal(PerimeterOfSector(OAB),Add(RadiusOfCircle(O),RadiusOfCircle(O),LengthOfArc(OAB)))']}, {'theorem': 'sector_area_formula(1,OAB)', 'premise': 'Arc(OAB)', 'conclusion': ['Equal(AreaOfSector(OAB),Mul(MeasureOfArc(OAB),1/360*pi,RadiusOfCircle(O),RadiusOfCircle(O)))']}, {'theorem': 'perpendicular_bisector_judgment_per_and_bisect(1,AD,BC)', 'premise': 'IsBisectorOfAngle(AD,CAB)&Collinear(BDC)&Equal(LengthOfLine(BD),LengthOfLine(DC))', 'conclusion': ['IsPerpendicularBisectorOfLine(AD,BC)']}]
Your task is to solve Problem B by constructing a THEOREM_SEQUENCE specifically for it. While you may be inspired by the THEOREM_SEQUENCE of Problem A, the sequence for Problem B should be developed according to its unique conditions and goal, using theorems from the GDL. Ensure that each step in your THEOREM_SEQUENCE is justified by the premises provided in the GDL, and verify that the parameters you use to apply each theorem do not violate these premises.
The sequence for Problem B should consist of rows of tuples in the format (step_id;theorem), beginning with step_id=1 and incrementing sequentially.
The response format should include only:
EQUATIONS:
(equation)
(equation)
...
GOAL_SYMBOL:
(symbol)
ANSWER:
(answer)
THEOREM_SEQUENCE:
(step_id;theorem)
(step_id;theorem)
...

Inputs: DESCRIPTION, CONSTRUCTION_CDL, TEXT_CDL, GOAL_CDL, CONSTRUCTION_CDL_EXTENDED, SYMBOLS_AND_VALUES
Output: EQUATIONS, GOAL_SYMBOL, ANSWER, THEOREM_SEQUENCE

